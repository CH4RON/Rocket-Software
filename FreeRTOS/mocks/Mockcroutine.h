/* AUTOGENERATED FILE. DO NOT EDIT. */
#ifndef _MOCKCROUTINE_H
#define _MOCKCROUTINE_H

#include "FreeRTOS.h"
#include "croutine.h"
#include "unity.h"

/* Ignore the following warnings, since we are copying code */
#if defined(__GNUC__) && !defined(__ICC) && !defined(__TMS470__)
#if __GNUC__ > 4 || (__GNUC__ == 4 && (__GNUC_MINOR__ > 6 || (__GNUC_MINOR__ == 6 && __GNUC_PATCHLEVEL__ > 0)))
#pragma GCC diagnostic push
#endif
#if !defined(__clang__)
#pragma GCC diagnostic ignored "-Wpragmas"
#endif
#pragma GCC diagnostic ignored "-Wunknown-pragmas"
#pragma GCC diagnostic ignored "-Wduplicate-decl-specifier"
#endif

void Mockcroutine_Init(void);
void Mockcroutine_Destroy(void);
void Mockcroutine_Verify(void);

#define xCoRoutineCreate_IgnoreAndReturn(cmock_retval) xCoRoutineCreate_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void xCoRoutineCreate_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, BaseType_t cmock_to_return);
#define xCoRoutineCreate_ExpectAnyArgsAndReturn(cmock_retval) xCoRoutineCreate_CMockExpectAnyArgsAndReturn(__LINE__, cmock_retval)
void xCoRoutineCreate_CMockExpectAnyArgsAndReturn(UNITY_LINE_TYPE cmock_line, BaseType_t cmock_to_return);
#define xCoRoutineCreate_ExpectAndReturn(pxCoRoutineCode, uxPriority, uxIndex, cmock_retval) xCoRoutineCreate_CMockExpectAndReturn(__LINE__, pxCoRoutineCode, uxPriority, uxIndex, cmock_retval)
void xCoRoutineCreate_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, crCOROUTINE_CODE pxCoRoutineCode, UBaseType_t uxPriority, UBaseType_t uxIndex, BaseType_t cmock_to_return);
#define xCoRoutineCreate_IgnoreArg_pxCoRoutineCode() xCoRoutineCreate_CMockIgnoreArg_pxCoRoutineCode(__LINE__)
void xCoRoutineCreate_CMockIgnoreArg_pxCoRoutineCode(UNITY_LINE_TYPE cmock_line);
#define xCoRoutineCreate_IgnoreArg_uxPriority() xCoRoutineCreate_CMockIgnoreArg_uxPriority(__LINE__)
void xCoRoutineCreate_CMockIgnoreArg_uxPriority(UNITY_LINE_TYPE cmock_line);
#define xCoRoutineCreate_IgnoreArg_uxIndex() xCoRoutineCreate_CMockIgnoreArg_uxIndex(__LINE__)
void xCoRoutineCreate_CMockIgnoreArg_uxIndex(UNITY_LINE_TYPE cmock_line);
#define vCoRoutineSchedule_Ignore() vCoRoutineSchedule_CMockIgnore()
void vCoRoutineSchedule_CMockIgnore(void);
#define vCoRoutineSchedule_Expect() vCoRoutineSchedule_CMockExpect(__LINE__)
void vCoRoutineSchedule_CMockExpect(UNITY_LINE_TYPE cmock_line);
#define vCoRoutineAddToDelayedList_Ignore() vCoRoutineAddToDelayedList_CMockIgnore()
void vCoRoutineAddToDelayedList_CMockIgnore(void);
#define vCoRoutineAddToDelayedList_ExpectAnyArgs() vCoRoutineAddToDelayedList_CMockExpectAnyArgs(__LINE__)
void vCoRoutineAddToDelayedList_CMockExpectAnyArgs(UNITY_LINE_TYPE cmock_line);
#define vCoRoutineAddToDelayedList_Expect(xTicksToDelay, pxEventList) vCoRoutineAddToDelayedList_CMockExpect(__LINE__, xTicksToDelay, pxEventList)
void vCoRoutineAddToDelayedList_CMockExpect(UNITY_LINE_TYPE cmock_line, TickType_t xTicksToDelay, List_t* pxEventList);
#define vCoRoutineAddToDelayedList_ExpectWithArray(xTicksToDelay, pxEventList, pxEventList_Depth) vCoRoutineAddToDelayedList_CMockExpectWithArray(__LINE__, xTicksToDelay, pxEventList, pxEventList_Depth)
void vCoRoutineAddToDelayedList_CMockExpectWithArray(UNITY_LINE_TYPE cmock_line, TickType_t xTicksToDelay, List_t* pxEventList, int pxEventList_Depth);
#define vCoRoutineAddToDelayedList_IgnoreArg_xTicksToDelay() vCoRoutineAddToDelayedList_CMockIgnoreArg_xTicksToDelay(__LINE__)
void vCoRoutineAddToDelayedList_CMockIgnoreArg_xTicksToDelay(UNITY_LINE_TYPE cmock_line);
#define vCoRoutineAddToDelayedList_IgnoreArg_pxEventList() vCoRoutineAddToDelayedList_CMockIgnoreArg_pxEventList(__LINE__)
void vCoRoutineAddToDelayedList_CMockIgnoreArg_pxEventList(UNITY_LINE_TYPE cmock_line);
#define xCoRoutineRemoveFromEventList_IgnoreAndReturn(cmock_retval) xCoRoutineRemoveFromEventList_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void xCoRoutineRemoveFromEventList_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, BaseType_t cmock_to_return);
#define xCoRoutineRemoveFromEventList_ExpectAnyArgsAndReturn(cmock_retval) xCoRoutineRemoveFromEventList_CMockExpectAnyArgsAndReturn(__LINE__, cmock_retval)
void xCoRoutineRemoveFromEventList_CMockExpectAnyArgsAndReturn(UNITY_LINE_TYPE cmock_line, BaseType_t cmock_to_return);
#define xCoRoutineRemoveFromEventList_ExpectAndReturn(pxEventList, cmock_retval) xCoRoutineRemoveFromEventList_CMockExpectAndReturn(__LINE__, pxEventList, cmock_retval)
void xCoRoutineRemoveFromEventList_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, const List_t* pxEventList, BaseType_t cmock_to_return);
#define xCoRoutineRemoveFromEventList_ExpectWithArrayAndReturn(pxEventList, pxEventList_Depth, cmock_retval) xCoRoutineRemoveFromEventList_CMockExpectWithArrayAndReturn(__LINE__, pxEventList, pxEventList_Depth, cmock_retval)
void xCoRoutineRemoveFromEventList_CMockExpectWithArrayAndReturn(UNITY_LINE_TYPE cmock_line, const List_t* pxEventList, int pxEventList_Depth, BaseType_t cmock_to_return);
#define xCoRoutineRemoveFromEventList_IgnoreArg_pxEventList() xCoRoutineRemoveFromEventList_CMockIgnoreArg_pxEventList(__LINE__)
void xCoRoutineRemoveFromEventList_CMockIgnoreArg_pxEventList(UNITY_LINE_TYPE cmock_line);

#if defined(__GNUC__) && !defined(__ICC) && !defined(__TMS470__)
#if __GNUC__ > 4 || (__GNUC__ == 4 && (__GNUC_MINOR__ > 6 || (__GNUC_MINOR__ == 6 && __GNUC_PATCHLEVEL__ > 0)))
#pragma GCC diagnostic pop
#endif
#endif

#endif
