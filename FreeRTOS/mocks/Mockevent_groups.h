/* AUTOGENERATED FILE. DO NOT EDIT. */
#ifndef _MOCKEVENT_GROUPS_H
#define _MOCKEVENT_GROUPS_H

#include "FreeRTOS.h"
#include "event_groups.h"
#include "unity.h"

/* Ignore the following warnings, since we are copying code */
#if defined(__GNUC__) && !defined(__ICC) && !defined(__TMS470__)
#if __GNUC__ > 4 || (__GNUC__ == 4 && (__GNUC_MINOR__ > 6 || (__GNUC_MINOR__ == 6 && __GNUC_PATCHLEVEL__ > 0)))
#pragma GCC diagnostic push
#endif
#if !defined(__clang__)
#pragma GCC diagnostic ignored "-Wpragmas"
#endif
#pragma GCC diagnostic ignored "-Wunknown-pragmas"
#pragma GCC diagnostic ignored "-Wduplicate-decl-specifier"
#endif

void Mockevent_groups_Init(void);
void Mockevent_groups_Destroy(void);
void Mockevent_groups_Verify(void);

#define xEventGroupCreate_ExpectAndReturn(cmock_retval) xEventGroupCreate_CMockExpectAndReturn(__LINE__, cmock_retval)
void xEventGroupCreate_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, EventGroupHandle_t cmock_to_return);
#define xEventGroupCreateStatic_ExpectAndReturn(pxEventGroupBuffer, cmock_retval) xEventGroupCreateStatic_CMockExpectAndReturn(__LINE__, pxEventGroupBuffer, cmock_retval)
void xEventGroupCreateStatic_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, StaticEventGroup_t* pxEventGroupBuffer, EventGroupHandle_t cmock_to_return);
#define xEventGroupWaitBits_ExpectAndReturn(xEventGroup, uxBitsToWaitFor, xClearOnExit, xWaitForAllBits, xTicksToWait, cmock_retval) xEventGroupWaitBits_CMockExpectAndReturn(__LINE__, xEventGroup, uxBitsToWaitFor, xClearOnExit, xWaitForAllBits, xTicksToWait, cmock_retval)
void xEventGroupWaitBits_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait, EventBits_t cmock_to_return);
#define xEventGroupClearBits_ExpectAndReturn(xEventGroup, uxBitsToClear, cmock_retval) xEventGroupClearBits_CMockExpectAndReturn(__LINE__, xEventGroup, uxBitsToClear, cmock_retval)
void xEventGroupClearBits_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToClear, EventBits_t cmock_to_return);
#define xEventGroupClearBitsFromISR_ExpectAndReturn(xEventGroup, uxBitsToClear, cmock_retval) xEventGroupClearBitsFromISR_CMockExpectAndReturn(__LINE__, xEventGroup, uxBitsToClear, cmock_retval)
void xEventGroupClearBitsFromISR_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToClear, BaseType_t cmock_to_return);
#define xEventGroupSetBits_ExpectAndReturn(xEventGroup, uxBitsToSet, cmock_retval) xEventGroupSetBits_CMockExpectAndReturn(__LINE__, xEventGroup, uxBitsToSet, cmock_retval)
void xEventGroupSetBits_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, EventBits_t cmock_to_return);
#define xEventGroupSetBitsFromISR_ExpectAndReturn(xEventGroup, uxBitsToSet, pxHigherPriorityTaskWoken, cmock_retval) xEventGroupSetBitsFromISR_CMockExpectAndReturn(__LINE__, xEventGroup, uxBitsToSet, pxHigherPriorityTaskWoken, cmock_retval)
void xEventGroupSetBitsFromISR_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, BaseType_t* pxHigherPriorityTaskWoken, BaseType_t cmock_to_return);
#define xEventGroupSync_ExpectAndReturn(xEventGroup, uxBitsToSet, uxBitsToWaitFor, xTicksToWait, cmock_retval) xEventGroupSync_CMockExpectAndReturn(__LINE__, xEventGroup, uxBitsToSet, uxBitsToWaitFor, xTicksToWait, cmock_retval)
void xEventGroupSync_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, const EventBits_t uxBitsToWaitFor, TickType_t xTicksToWait, EventBits_t cmock_to_return);
#define xEventGroupGetBitsFromISR_ExpectAndReturn(xEventGroup, cmock_retval) xEventGroupGetBitsFromISR_CMockExpectAndReturn(__LINE__, xEventGroup, cmock_retval)
void xEventGroupGetBitsFromISR_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, EventGroupHandle_t xEventGroup, EventBits_t cmock_to_return);
#define vEventGroupDelete_Expect(xEventGroup) vEventGroupDelete_CMockExpect(__LINE__, xEventGroup)
void vEventGroupDelete_CMockExpect(UNITY_LINE_TYPE cmock_line, EventGroupHandle_t xEventGroup);
#define vEventGroupSetBitsCallback_Expect(pvEventGroup, ulBitsToSet) vEventGroupSetBitsCallback_CMockExpect(__LINE__, pvEventGroup, ulBitsToSet)
void vEventGroupSetBitsCallback_CMockExpect(UNITY_LINE_TYPE cmock_line, void* pvEventGroup, const uint32_t ulBitsToSet);
#define vEventGroupClearBitsCallback_Expect(pvEventGroup, ulBitsToClear) vEventGroupClearBitsCallback_CMockExpect(__LINE__, pvEventGroup, ulBitsToClear)
void vEventGroupClearBitsCallback_CMockExpect(UNITY_LINE_TYPE cmock_line, void* pvEventGroup, const uint32_t ulBitsToClear);
#define uxEventGroupGetNumber_ExpectAndReturn(xEventGroup, cmock_retval) uxEventGroupGetNumber_CMockExpectAndReturn(__LINE__, xEventGroup, cmock_retval)
void uxEventGroupGetNumber_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, void* xEventGroup, UBaseType_t cmock_to_return);
#define vEventGroupSetNumber_Expect(xEventGroup, uxEventGroupNumber) vEventGroupSetNumber_CMockExpect(__LINE__, xEventGroup, uxEventGroupNumber)
void vEventGroupSetNumber_CMockExpect(UNITY_LINE_TYPE cmock_line, void* xEventGroup, UBaseType_t uxEventGroupNumber);

#if defined(__GNUC__) && !defined(__ICC) && !defined(__TMS470__)
#if __GNUC__ > 4 || (__GNUC__ == 4 && (__GNUC_MINOR__ > 6 || (__GNUC_MINOR__ == 6 && __GNUC_PATCHLEVEL__ > 0)))
#pragma GCC diagnostic pop
#endif
#endif

#endif
