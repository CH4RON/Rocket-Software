/* AUTOGENERATED FILE. DO NOT EDIT. */
#ifndef _MOCKLIST_H
#define _MOCKLIST_H

#include "FreeRTOS.h"
#include "list.h"
#include "unity.h"

/* Ignore the following warnings, since we are copying code */
#if defined(__GNUC__) && !defined(__ICC) && !defined(__TMS470__)
#if __GNUC__ > 4 || (__GNUC__ == 4 && (__GNUC_MINOR__ > 6 || (__GNUC_MINOR__ == 6 && __GNUC_PATCHLEVEL__ > 0)))
#pragma GCC diagnostic push
#endif
#if !defined(__clang__)
#pragma GCC diagnostic ignored "-Wpragmas"
#endif
#pragma GCC diagnostic ignored "-Wunknown-pragmas"
#pragma GCC diagnostic ignored "-Wduplicate-decl-specifier"
#endif

void Mocklist_Init(void);
void Mocklist_Destroy(void);
void Mocklist_Verify(void);

#define vListInitialise_Ignore() vListInitialise_CMockIgnore()
void vListInitialise_CMockIgnore(void);
#define vListInitialise_ExpectAnyArgs() vListInitialise_CMockExpectAnyArgs(__LINE__)
void vListInitialise_CMockExpectAnyArgs(UNITY_LINE_TYPE cmock_line);
#define vListInitialise_Expect(pxList) vListInitialise_CMockExpect(__LINE__, pxList)
void vListInitialise_CMockExpect(UNITY_LINE_TYPE cmock_line, List_t* const pxList);
#define vListInitialise_ExpectWithArray(pxList, pxList_Depth) vListInitialise_CMockExpectWithArray(__LINE__, pxList, pxList_Depth)
void vListInitialise_CMockExpectWithArray(UNITY_LINE_TYPE cmock_line, List_t* const pxList, int pxList_Depth);
#define vListInitialise_IgnoreArg_pxList() vListInitialise_CMockIgnoreArg_pxList(__LINE__)
void vListInitialise_CMockIgnoreArg_pxList(UNITY_LINE_TYPE cmock_line);
#define vListInitialiseItem_Ignore() vListInitialiseItem_CMockIgnore()
void vListInitialiseItem_CMockIgnore(void);
#define vListInitialiseItem_ExpectAnyArgs() vListInitialiseItem_CMockExpectAnyArgs(__LINE__)
void vListInitialiseItem_CMockExpectAnyArgs(UNITY_LINE_TYPE cmock_line);
#define vListInitialiseItem_Expect(pxItem) vListInitialiseItem_CMockExpect(__LINE__, pxItem)
void vListInitialiseItem_CMockExpect(UNITY_LINE_TYPE cmock_line, ListItem_t* const pxItem);
#define vListInitialiseItem_ExpectWithArray(pxItem, pxItem_Depth) vListInitialiseItem_CMockExpectWithArray(__LINE__, pxItem, pxItem_Depth)
void vListInitialiseItem_CMockExpectWithArray(UNITY_LINE_TYPE cmock_line, ListItem_t* const pxItem, int pxItem_Depth);
#define vListInitialiseItem_IgnoreArg_pxItem() vListInitialiseItem_CMockIgnoreArg_pxItem(__LINE__)
void vListInitialiseItem_CMockIgnoreArg_pxItem(UNITY_LINE_TYPE cmock_line);
#define vListInsert_Ignore() vListInsert_CMockIgnore()
void vListInsert_CMockIgnore(void);
#define vListInsert_ExpectAnyArgs() vListInsert_CMockExpectAnyArgs(__LINE__)
void vListInsert_CMockExpectAnyArgs(UNITY_LINE_TYPE cmock_line);
#define vListInsert_Expect(pxList, pxNewListItem) vListInsert_CMockExpect(__LINE__, pxList, pxNewListItem)
void vListInsert_CMockExpect(UNITY_LINE_TYPE cmock_line, List_t* const pxList, ListItem_t* const pxNewListItem);
#define vListInsert_ExpectWithArray(pxList, pxList_Depth, pxNewListItem, pxNewListItem_Depth) vListInsert_CMockExpectWithArray(__LINE__, pxList, pxList_Depth, pxNewListItem, pxNewListItem_Depth)
void vListInsert_CMockExpectWithArray(UNITY_LINE_TYPE cmock_line, List_t* const pxList, int pxList_Depth, ListItem_t* const pxNewListItem, int pxNewListItem_Depth);
#define vListInsert_IgnoreArg_pxList() vListInsert_CMockIgnoreArg_pxList(__LINE__)
void vListInsert_CMockIgnoreArg_pxList(UNITY_LINE_TYPE cmock_line);
#define vListInsert_IgnoreArg_pxNewListItem() vListInsert_CMockIgnoreArg_pxNewListItem(__LINE__)
void vListInsert_CMockIgnoreArg_pxNewListItem(UNITY_LINE_TYPE cmock_line);
#define vListInsertEnd_Ignore() vListInsertEnd_CMockIgnore()
void vListInsertEnd_CMockIgnore(void);
#define vListInsertEnd_ExpectAnyArgs() vListInsertEnd_CMockExpectAnyArgs(__LINE__)
void vListInsertEnd_CMockExpectAnyArgs(UNITY_LINE_TYPE cmock_line);
#define vListInsertEnd_Expect(pxList, pxNewListItem) vListInsertEnd_CMockExpect(__LINE__, pxList, pxNewListItem)
void vListInsertEnd_CMockExpect(UNITY_LINE_TYPE cmock_line, List_t* const pxList, ListItem_t* const pxNewListItem);
#define vListInsertEnd_ExpectWithArray(pxList, pxList_Depth, pxNewListItem, pxNewListItem_Depth) vListInsertEnd_CMockExpectWithArray(__LINE__, pxList, pxList_Depth, pxNewListItem, pxNewListItem_Depth)
void vListInsertEnd_CMockExpectWithArray(UNITY_LINE_TYPE cmock_line, List_t* const pxList, int pxList_Depth, ListItem_t* const pxNewListItem, int pxNewListItem_Depth);
#define vListInsertEnd_IgnoreArg_pxList() vListInsertEnd_CMockIgnoreArg_pxList(__LINE__)
void vListInsertEnd_CMockIgnoreArg_pxList(UNITY_LINE_TYPE cmock_line);
#define vListInsertEnd_IgnoreArg_pxNewListItem() vListInsertEnd_CMockIgnoreArg_pxNewListItem(__LINE__)
void vListInsertEnd_CMockIgnoreArg_pxNewListItem(UNITY_LINE_TYPE cmock_line);
#define uxListRemove_IgnoreAndReturn(cmock_retval) uxListRemove_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void uxListRemove_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, UBaseType_t cmock_to_return);
#define uxListRemove_ExpectAnyArgsAndReturn(cmock_retval) uxListRemove_CMockExpectAnyArgsAndReturn(__LINE__, cmock_retval)
void uxListRemove_CMockExpectAnyArgsAndReturn(UNITY_LINE_TYPE cmock_line, UBaseType_t cmock_to_return);
#define uxListRemove_ExpectAndReturn(pxItemToRemove, cmock_retval) uxListRemove_CMockExpectAndReturn(__LINE__, pxItemToRemove, cmock_retval)
void uxListRemove_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, ListItem_t* const pxItemToRemove, UBaseType_t cmock_to_return);
#define uxListRemove_ExpectWithArrayAndReturn(pxItemToRemove, pxItemToRemove_Depth, cmock_retval) uxListRemove_CMockExpectWithArrayAndReturn(__LINE__, pxItemToRemove, pxItemToRemove_Depth, cmock_retval)
void uxListRemove_CMockExpectWithArrayAndReturn(UNITY_LINE_TYPE cmock_line, ListItem_t* const pxItemToRemove, int pxItemToRemove_Depth, UBaseType_t cmock_to_return);
#define uxListRemove_IgnoreArg_pxItemToRemove() uxListRemove_CMockIgnoreArg_pxItemToRemove(__LINE__)
void uxListRemove_CMockIgnoreArg_pxItemToRemove(UNITY_LINE_TYPE cmock_line);

#if defined(__GNUC__) && !defined(__ICC) && !defined(__TMS470__)
#if __GNUC__ > 4 || (__GNUC__ == 4 && (__GNUC_MINOR__ > 6 || (__GNUC_MINOR__ == 6 && __GNUC_PATCHLEVEL__ > 0)))
#pragma GCC diagnostic pop
#endif
#endif

#endif
