/* AUTOGENERATED FILE. DO NOT EDIT. */
#ifndef _MOCKSTREAM_BUFFER_H
#define _MOCKSTREAM_BUFFER_H

#include "FreeRTOS.h"
#include "stream_buffer.h"
#include "unity.h"

/* Ignore the following warnings, since we are copying code */
#if defined(__GNUC__) && !defined(__ICC) && !defined(__TMS470__)
#if __GNUC__ > 4 || (__GNUC__ == 4 && (__GNUC_MINOR__ > 6 || (__GNUC_MINOR__ == 6 && __GNUC_PATCHLEVEL__ > 0)))
#pragma GCC diagnostic push
#endif
#if !defined(__clang__)
#pragma GCC diagnostic ignored "-Wpragmas"
#endif
#pragma GCC diagnostic ignored "-Wunknown-pragmas"
#pragma GCC diagnostic ignored "-Wduplicate-decl-specifier"
#endif

void Mockstream_buffer_Init(void);
void Mockstream_buffer_Destroy(void);
void Mockstream_buffer_Verify(void);

#define xStreamBufferSend_ExpectAndReturn(xStreamBuffer, pvTxData, xDataLengthBytes, xTicksToWait, cmock_retval) xStreamBufferSend_CMockExpectAndReturn(__LINE__, xStreamBuffer, pvTxData, xDataLengthBytes, xTicksToWait, cmock_retval)
void xStreamBufferSend_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, StreamBufferHandle_t xStreamBuffer, const void* pvTxData, size_t xDataLengthBytes, TickType_t xTicksToWait, size_t cmock_to_return);
#define xStreamBufferSendFromISR_ExpectAndReturn(xStreamBuffer, pvTxData, xDataLengthBytes, pxHigherPriorityTaskWoken, cmock_retval) xStreamBufferSendFromISR_CMockExpectAndReturn(__LINE__, xStreamBuffer, pvTxData, xDataLengthBytes, pxHigherPriorityTaskWoken, cmock_retval)
void xStreamBufferSendFromISR_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, StreamBufferHandle_t xStreamBuffer, const void* pvTxData, size_t xDataLengthBytes, BaseType_t* const pxHigherPriorityTaskWoken, size_t cmock_to_return);
#define xStreamBufferReceive_ExpectAndReturn(xStreamBuffer, pvRxData, xBufferLengthBytes, xTicksToWait, cmock_retval) xStreamBufferReceive_CMockExpectAndReturn(__LINE__, xStreamBuffer, pvRxData, xBufferLengthBytes, xTicksToWait, cmock_retval)
void xStreamBufferReceive_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, StreamBufferHandle_t xStreamBuffer, void* pvRxData, size_t xBufferLengthBytes, TickType_t xTicksToWait, size_t cmock_to_return);
#define xStreamBufferReceiveFromISR_ExpectAndReturn(xStreamBuffer, pvRxData, xBufferLengthBytes, pxHigherPriorityTaskWoken, cmock_retval) xStreamBufferReceiveFromISR_CMockExpectAndReturn(__LINE__, xStreamBuffer, pvRxData, xBufferLengthBytes, pxHigherPriorityTaskWoken, cmock_retval)
void xStreamBufferReceiveFromISR_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, StreamBufferHandle_t xStreamBuffer, void* pvRxData, size_t xBufferLengthBytes, BaseType_t* const pxHigherPriorityTaskWoken, size_t cmock_to_return);
#define vStreamBufferDelete_Expect(xStreamBuffer) vStreamBufferDelete_CMockExpect(__LINE__, xStreamBuffer)
void vStreamBufferDelete_CMockExpect(UNITY_LINE_TYPE cmock_line, StreamBufferHandle_t xStreamBuffer);
#define xStreamBufferIsFull_ExpectAndReturn(xStreamBuffer, cmock_retval) xStreamBufferIsFull_CMockExpectAndReturn(__LINE__, xStreamBuffer, cmock_retval)
void xStreamBufferIsFull_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, StreamBufferHandle_t xStreamBuffer, BaseType_t cmock_to_return);
#define xStreamBufferIsEmpty_ExpectAndReturn(xStreamBuffer, cmock_retval) xStreamBufferIsEmpty_CMockExpectAndReturn(__LINE__, xStreamBuffer, cmock_retval)
void xStreamBufferIsEmpty_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, StreamBufferHandle_t xStreamBuffer, BaseType_t cmock_to_return);
#define xStreamBufferReset_ExpectAndReturn(xStreamBuffer, cmock_retval) xStreamBufferReset_CMockExpectAndReturn(__LINE__, xStreamBuffer, cmock_retval)
void xStreamBufferReset_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, StreamBufferHandle_t xStreamBuffer, BaseType_t cmock_to_return);
#define xStreamBufferSpacesAvailable_ExpectAndReturn(xStreamBuffer, cmock_retval) xStreamBufferSpacesAvailable_CMockExpectAndReturn(__LINE__, xStreamBuffer, cmock_retval)
void xStreamBufferSpacesAvailable_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, StreamBufferHandle_t xStreamBuffer, size_t cmock_to_return);
#define xStreamBufferBytesAvailable_ExpectAndReturn(xStreamBuffer, cmock_retval) xStreamBufferBytesAvailable_CMockExpectAndReturn(__LINE__, xStreamBuffer, cmock_retval)
void xStreamBufferBytesAvailable_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, StreamBufferHandle_t xStreamBuffer, size_t cmock_to_return);
#define xStreamBufferSetTriggerLevel_ExpectAndReturn(xStreamBuffer, xTriggerLevel, cmock_retval) xStreamBufferSetTriggerLevel_CMockExpectAndReturn(__LINE__, xStreamBuffer, xTriggerLevel, cmock_retval)
void xStreamBufferSetTriggerLevel_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, StreamBufferHandle_t xStreamBuffer, size_t xTriggerLevel, BaseType_t cmock_to_return);
#define xStreamBufferSendCompletedFromISR_ExpectAndReturn(xStreamBuffer, pxHigherPriorityTaskWoken, cmock_retval) xStreamBufferSendCompletedFromISR_CMockExpectAndReturn(__LINE__, xStreamBuffer, pxHigherPriorityTaskWoken, cmock_retval)
void xStreamBufferSendCompletedFromISR_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, StreamBufferHandle_t xStreamBuffer, BaseType_t* pxHigherPriorityTaskWoken, BaseType_t cmock_to_return);
#define xStreamBufferReceiveCompletedFromISR_ExpectAndReturn(xStreamBuffer, pxHigherPriorityTaskWoken, cmock_retval) xStreamBufferReceiveCompletedFromISR_CMockExpectAndReturn(__LINE__, xStreamBuffer, pxHigherPriorityTaskWoken, cmock_retval)
void xStreamBufferReceiveCompletedFromISR_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, StreamBufferHandle_t xStreamBuffer, BaseType_t* pxHigherPriorityTaskWoken, BaseType_t cmock_to_return);
#define xStreamBufferGenericCreate_ExpectAndReturn(xBufferSizeBytes, xTriggerLevelBytes, xIsMessageBuffer, cmock_retval) xStreamBufferGenericCreate_CMockExpectAndReturn(__LINE__, xBufferSizeBytes, xTriggerLevelBytes, xIsMessageBuffer, cmock_retval)
void xStreamBufferGenericCreate_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, size_t xBufferSizeBytes, size_t xTriggerLevelBytes, BaseType_t xIsMessageBuffer, StreamBufferHandle_t cmock_to_return);
#define xStreamBufferGenericCreateStatic_ExpectAndReturn(xBufferSizeBytes, xTriggerLevelBytes, xIsMessageBuffer, pucStreamBufferStorageArea, pxStaticStreamBuffer, cmock_retval) xStreamBufferGenericCreateStatic_CMockExpectAndReturn(__LINE__, xBufferSizeBytes, xTriggerLevelBytes, xIsMessageBuffer, pucStreamBufferStorageArea, pxStaticStreamBuffer, cmock_retval)
void xStreamBufferGenericCreateStatic_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, size_t xBufferSizeBytes, size_t xTriggerLevelBytes, BaseType_t xIsMessageBuffer, uint8_t* const pucStreamBufferStorageArea, StaticStreamBuffer_t* const pxStaticStreamBuffer, StreamBufferHandle_t cmock_to_return);
#define xStreamBufferNextMessageLengthBytes_ExpectAndReturn(xStreamBuffer, cmock_retval) xStreamBufferNextMessageLengthBytes_CMockExpectAndReturn(__LINE__, xStreamBuffer, cmock_retval)
void xStreamBufferNextMessageLengthBytes_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, StreamBufferHandle_t xStreamBuffer, size_t cmock_to_return);
#define vStreamBufferSetStreamBufferNumber_Expect(xStreamBuffer, uxStreamBufferNumber) vStreamBufferSetStreamBufferNumber_CMockExpect(__LINE__, xStreamBuffer, uxStreamBufferNumber)
void vStreamBufferSetStreamBufferNumber_CMockExpect(UNITY_LINE_TYPE cmock_line, StreamBufferHandle_t xStreamBuffer, UBaseType_t uxStreamBufferNumber);
#define uxStreamBufferGetStreamBufferNumber_ExpectAndReturn(xStreamBuffer, cmock_retval) uxStreamBufferGetStreamBufferNumber_CMockExpectAndReturn(__LINE__, xStreamBuffer, cmock_retval)
void uxStreamBufferGetStreamBufferNumber_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, StreamBufferHandle_t xStreamBuffer, UBaseType_t cmock_to_return);
#define ucStreamBufferGetStreamBufferType_ExpectAndReturn(xStreamBuffer, cmock_retval) ucStreamBufferGetStreamBufferType_CMockExpectAndReturn(__LINE__, xStreamBuffer, cmock_retval)
void ucStreamBufferGetStreamBufferType_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, StreamBufferHandle_t xStreamBuffer, uint8_t cmock_to_return);

#if defined(__GNUC__) && !defined(__ICC) && !defined(__TMS470__)
#if __GNUC__ > 4 || (__GNUC__ == 4 && (__GNUC_MINOR__ > 6 || (__GNUC_MINOR__ == 6 && __GNUC_PATCHLEVEL__ > 0)))
#pragma GCC diagnostic pop
#endif
#endif

#endif
