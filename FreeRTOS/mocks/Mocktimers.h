/* AUTOGENERATED FILE. DO NOT EDIT. */
#ifndef _MOCKTIMERS_H
#define _MOCKTIMERS_H

#include "FreeRTOS.h"
#include "timers.h"
#include "unity.h"

/* Ignore the following warnings, since we are copying code */
#if defined(__GNUC__) && !defined(__ICC) && !defined(__TMS470__)
#if __GNUC__ > 4 || (__GNUC__ == 4 && (__GNUC_MINOR__ > 6 || (__GNUC_MINOR__ == 6 && __GNUC_PATCHLEVEL__ > 0)))
#pragma GCC diagnostic push
#endif
#if !defined(__clang__)
#pragma GCC diagnostic ignored "-Wpragmas"
#endif
#pragma GCC diagnostic ignored "-Wunknown-pragmas"
#pragma GCC diagnostic ignored "-Wduplicate-decl-specifier"
#endif

void Mocktimers_Init(void);
void Mocktimers_Destroy(void);
void Mocktimers_Verify(void);

#define xTimerCreate_ExpectAndReturn(pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, cmock_retval) xTimerCreate_CMockExpectAndReturn(__LINE__, pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, cmock_retval)
void xTimerCreate_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, const char* const pcTimerName, const TickType_t xTimerPeriodInTicks, const UBaseType_t uxAutoReload, void* const pvTimerID, TimerCallbackFunction_t pxCallbackFunction, TimerHandle_t cmock_to_return);
#define xTimerCreateStatic_ExpectAndReturn(pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxTimerBuffer, cmock_retval) xTimerCreateStatic_CMockExpectAndReturn(__LINE__, pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxTimerBuffer, cmock_retval)
void xTimerCreateStatic_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, const char* const pcTimerName, const TickType_t xTimerPeriodInTicks, const UBaseType_t uxAutoReload, void* const pvTimerID, TimerCallbackFunction_t pxCallbackFunction, StaticTimer_t* pxTimerBuffer, TimerHandle_t cmock_to_return);
#define pvTimerGetTimerID_ExpectAndReturn(xTimer, cmock_retval) pvTimerGetTimerID_CMockExpectAndReturn(__LINE__, xTimer, cmock_retval)
void pvTimerGetTimerID_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, const TimerHandle_t xTimer, void* cmock_to_return);
#define vTimerSetTimerID_Expect(xTimer, pvNewID) vTimerSetTimerID_CMockExpect(__LINE__, xTimer, pvNewID)
void vTimerSetTimerID_CMockExpect(UNITY_LINE_TYPE cmock_line, TimerHandle_t xTimer, void* pvNewID);
#define xTimerIsTimerActive_ExpectAndReturn(xTimer, cmock_retval) xTimerIsTimerActive_CMockExpectAndReturn(__LINE__, xTimer, cmock_retval)
void xTimerIsTimerActive_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, TimerHandle_t xTimer, BaseType_t cmock_to_return);
#define xTimerGetTimerDaemonTaskHandle_ExpectAndReturn(cmock_retval) xTimerGetTimerDaemonTaskHandle_CMockExpectAndReturn(__LINE__, cmock_retval)
void xTimerGetTimerDaemonTaskHandle_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, TaskHandle_t cmock_to_return);
#define xTimerPendFunctionCallFromISR_ExpectAndReturn(xFunctionToPend, pvParameter1, ulParameter2, pxHigherPriorityTaskWoken, cmock_retval) xTimerPendFunctionCallFromISR_CMockExpectAndReturn(__LINE__, xFunctionToPend, pvParameter1, ulParameter2, pxHigherPriorityTaskWoken, cmock_retval)
void xTimerPendFunctionCallFromISR_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, PendedFunction_t xFunctionToPend, void* pvParameter1, uint32_t ulParameter2, BaseType_t* pxHigherPriorityTaskWoken, BaseType_t cmock_to_return);
#define xTimerPendFunctionCall_ExpectAndReturn(xFunctionToPend, pvParameter1, ulParameter2, xTicksToWait, cmock_retval) xTimerPendFunctionCall_CMockExpectAndReturn(__LINE__, xFunctionToPend, pvParameter1, ulParameter2, xTicksToWait, cmock_retval)
void xTimerPendFunctionCall_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, PendedFunction_t xFunctionToPend, void* pvParameter1, uint32_t ulParameter2, TickType_t xTicksToWait, BaseType_t cmock_to_return);
#define pcTimerGetName_ExpectAndReturn(xTimer, cmock_retval) pcTimerGetName_CMockExpectAndReturn(__LINE__, xTimer, cmock_retval)
void pcTimerGetName_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, TimerHandle_t xTimer, const char* cmock_to_return);
#define vTimerSetReloadMode_Expect(xTimer, uxAutoReload) vTimerSetReloadMode_CMockExpect(__LINE__, xTimer, uxAutoReload)
void vTimerSetReloadMode_CMockExpect(UNITY_LINE_TYPE cmock_line, TimerHandle_t xTimer, const UBaseType_t uxAutoReload);
#define xTimerGetPeriod_ExpectAndReturn(xTimer, cmock_retval) xTimerGetPeriod_CMockExpectAndReturn(__LINE__, xTimer, cmock_retval)
void xTimerGetPeriod_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, TimerHandle_t xTimer, TickType_t cmock_to_return);
#define xTimerGetExpiryTime_ExpectAndReturn(xTimer, cmock_retval) xTimerGetExpiryTime_CMockExpectAndReturn(__LINE__, xTimer, cmock_retval)
void xTimerGetExpiryTime_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, TimerHandle_t xTimer, TickType_t cmock_to_return);
#define xTimerCreateTimerTask_ExpectAndReturn(cmock_retval) xTimerCreateTimerTask_CMockExpectAndReturn(__LINE__, cmock_retval)
void xTimerCreateTimerTask_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, BaseType_t cmock_to_return);
#define xTimerGenericCommand_ExpectAndReturn(xTimer, xCommandID, xOptionalValue, pxHigherPriorityTaskWoken, xTicksToWait, cmock_retval) xTimerGenericCommand_CMockExpectAndReturn(__LINE__, xTimer, xCommandID, xOptionalValue, pxHigherPriorityTaskWoken, xTicksToWait, cmock_retval)
void xTimerGenericCommand_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t* const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait, BaseType_t cmock_to_return);
#define vTimerSetTimerNumber_Expect(xTimer, uxTimerNumber) vTimerSetTimerNumber_CMockExpect(__LINE__, xTimer, uxTimerNumber)
void vTimerSetTimerNumber_CMockExpect(UNITY_LINE_TYPE cmock_line, TimerHandle_t xTimer, UBaseType_t uxTimerNumber);
#define uxTimerGetTimerNumber_ExpectAndReturn(xTimer, cmock_retval) uxTimerGetTimerNumber_CMockExpectAndReturn(__LINE__, xTimer, cmock_retval)
void uxTimerGetTimerNumber_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, TimerHandle_t xTimer, UBaseType_t cmock_to_return);

#if defined(__GNUC__) && !defined(__ICC) && !defined(__TMS470__)
#if __GNUC__ > 4 || (__GNUC__ == 4 && (__GNUC_MINOR__ > 6 || (__GNUC_MINOR__ == 6 && __GNUC_PATCHLEVEL__ > 0)))
#pragma GCC diagnostic pop
#endif
#endif

#endif
