cmake_minimum_required(VERSION 3.11.1)


find_program(
    CLANG_TIDY_EXE
    NAMES "clang-tidy"
    DOC "Path to clang-tidy executable"
)

if(CLANG_TIDY_EXE)
    # set(CMAKE_C_CLANG_TIDY "${CLANG_TIDY_EXE}")
endif()

add_library(common INTERFACE)

target_sources(common INTERFACE
  ${CMAKE_CURRENT_SOURCE_DIR}/SS_init.c
  ${CMAKE_CURRENT_SOURCE_DIR}/SS_init.h)

set(SS_COMMON_DIR ${CMAKE_CURRENT_SOURCE_DIR})


target_include_directories(
        common INTERFACE ${CMAKE_CURRENT_SOURCE_DIR})

function(target_test_sources)
get_directory_property(COMPILE_DEFS COMPILE_DEFINITIONS)
if(COMPILE_DEFS MATCHES SS_RUN_TESTS)
  target_sources(${ARGV})
endif()
endfunction()

function(target_non_test_sources)
get_directory_property(COMPILE_DEFS COMPILE_DEFINITIONS)
if(NOT COMPILE_DEFS MATCHES SS_RUN_TESTS)
  target_sources(${ARGV})
endif()
endfunction()

add_subdirectory(misc)
add_subdirectory(dynamixel)
add_subdirectory(com)
add_subdirectory(servos)
add_subdirectory(ADS1258)
add_subdirectory(adc)
add_subdirectory(grazyna)
add_subdirectory(relays)
add_subdirectory(sequence)
add_subdirectory(json-settings)
add_subdirectory(supply)
add_subdirectory(MS5X)
add_subdirectory(can)
add_subdirectory(flash)
add_subdirectory(usb)
add_subdirectory(test)
add_subdirectory(log)
add_subdirectory(callbacks)
add_subdirectory(FreeRTOS)
add_subdirectory(console)
add_subdirectory(MPU9250)


function(target_link_common TARGET)
get_directory_property(COMPILE_DEFS COMPILE_DEFINITIONS)
if(COMPILE_DEFS MATCHES SS_USE_DYNAMIXEL)
    target_link_libraries(${TARGET} dynamixel)
endif()
if(COMPILE_DEFS MATCHES SS_USE_COM)
    target_link_libraries(${TARGET} com)
endif()
if(COMPILE_DEFS MATCHES SS_USE_SERVOS)
    target_link_libraries(${TARGET} servos)
endif()
if(COMPILE_DEFS MATCHES SS_USE_ADS1258)
    target_link_libraries(${TARGET} ADS1258)
endif()
if(COMPILE_DEFS MATCHES SS_USE_ADC)
    target_link_libraries(${TARGET} adc)
endif()
if(COMPILE_DEFS MATCHES SS_USE_GRAZYNA)
    target_link_libraries(${TARGET} grazyna)
endif()
if(COMPILE_DEFS MATCHES SS_USE_RELAYS)
    target_link_libraries(${TARGET} relays)
endif()
if(COMPILE_DEFS MATCHES SS_USE_S25FL)
    target_link_libraries(${TARGET} S25FL)
endif()
if(COMPILE_DEFS MATCHES SS_USE_SEQUENCE)
    target_link_libraries(${TARGET} sequence)
endif()
if(COMPILE_DEFS MATCHES SS_USE_JSON_SETTINGS)
    target_link_libraries(${TARGET} json-settings)
endif()
if(COMPILE_DEFS MATCHES SS_USE_SUPPLY)
    target_link_libraries(${TARGET} supply)
endif()
if(COMPILE_DEFS MATCHES SS_USE_MS5X)
    target_link_libraries(${TARGET} MS5X)
endif()
if(COMPILE_DEFS MATCHES SS_USE_CAN)
    target_link_libraries(${TARGET} can)
endif()
if(COMPILE_DEFS MATCHES SS_USE_FLASH)
    target_link_libraries(${TARGET} littlefs)
    target_link_libraries(${TARGET} flash)
endif()
if(COMPILE_DEFS MATCHES SS_USE_USB)
    target_link_libraries(${TARGET} usb)
endif()
if(COMPILE_DEFS MATCHES SS_RUN_TESTS)
    target_link_libraries(${TARGET} test_runner)
endif()
if(COMPILE_DEFS MATCHES SS_USE_MPU9250)
    target_link_libraries(${TARGET} MPU9250)
endif()


# Mandatory
target_link_libraries(${TARGET} common)
target_link_libraries(${TARGET} misc)
target_link_libraries(${TARGET} log)
target_link_libraries(${TARGET} callbacks)
target_link_libraries(${TARGET} console)
target_link_libraries(${TARGET} FreeRTOS_setup)

endfunction()
